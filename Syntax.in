block = statement ";"

statement = compoundStatement |  declarationStatement | assignmentStatement | IOstatement | ifStatement | loopStatement
compoundStatement = statement ";" statement

declarationStatement = "let" type identifier
type = ("int" | "bool" | "string") | type "[" integer "]"

assignmentStatement = identifier "=" expression
expression = listExpression | expression ("+" | "-" | "or") term | term
listExpression = "{" "}" | "{" expression {"," expression} "}"
term = term ("*" | "/" | "and") factor | factor
factor = "(" expression ")" | identifier | constant
constant = integer | boolean | string

IOstatement = readStatement | writeStatement
readStatement = "read" "(" identifier ")"
writeStatement = "write" "(" expression ")"

ifStatement = "if" "(" expression ")" "then" "{" block "}" ["else" "{" block "}"]

loopStatement = whileStatement | forStatement
forStatement = "for" "(" assignmentStatement ";" expression ";" assignmentStatement ")" "do" "{" block "}"
whileStatement = "while" "(" expression ")" "do" "{" block "}"

integer = "0" | ["+" | "-"] nonzero {digit}
boolean = "true" | "false"
string = """ {letter | digit | "_"} """

identifier = letter {letter | digit | "_"}
letter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
digit = "0" | nonzero
nonzero = "1" | "2" | ... | "9"